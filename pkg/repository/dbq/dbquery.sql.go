// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: dbquery.sql

package dbq

import (
	"context"
)

const createSpace = `-- name: CreateSpace :one
INSERT INTO spaces (
  name
) VALUES (
  ?
)
RETURNING id, name, created, updated
`

func (q *Queries) CreateSpace(ctx context.Context, name string) (Space, error) {
	row := q.db.QueryRowContext(ctx, createSpace, name)
	var i Space
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const deleteSpace = `-- name: DeleteSpace :exec
DELETE FROM spaces
WHERE name = ?
`

func (q *Queries) DeleteSpace(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteSpace, name)
	return err
}

const getSpace = `-- name: GetSpace :one
SELECT id, name, created, updated FROM spaces
WHERE name = ?
`

func (q *Queries) GetSpace(ctx context.Context, name string) (Space, error) {
	row := q.db.QueryRowContext(ctx, getSpace, name)
	var i Space
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const listSpaces = `-- name: ListSpaces :many
SELECT id, name, created, updated FROM spaces
`

func (q *Queries) ListSpaces(ctx context.Context) ([]Space, error) {
	rows, err := q.db.QueryContext(ctx, listSpaces)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Space
	for rows.Next() {
		var i Space
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
