// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: dbquery.sql

package dbq

import (
	"context"
	"database/sql"
	"strings"
)

const createHistory = `-- name: CreateHistory :one
INSERT INTO histories (resource, comment) VALUES (?, ?) RETURNING id, resource, comment, created, updated
`

type CreateHistoryParams struct {
	Resource string
	Comment  string
}

func (q *Queries) CreateHistory(ctx context.Context, arg CreateHistoryParams) (History, error) {
	row := q.db.QueryRowContext(ctx, createHistory, arg.Resource, arg.Comment)
	var i History
	err := row.Scan(
		&i.ID,
		&i.Resource,
		&i.Comment,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const createIsland = `-- name: CreateIsland :one
INSERT INTO islands (id, planet_id, title, content, comment) VALUES (?, ?, ?, ?, ?) RETURNING id, planet_id, title, content, comment, created, updated
`

type CreateIslandParams struct {
	ID       string
	PlanetID string
	Title    string
	Content  string
	Comment  string
}

func (q *Queries) CreateIsland(ctx context.Context, arg CreateIslandParams) (Island, error) {
	row := q.db.QueryRowContext(ctx, createIsland,
		arg.ID,
		arg.PlanetID,
		arg.Title,
		arg.Content,
		arg.Comment,
	)
	var i Island
	err := row.Scan(
		&i.ID,
		&i.PlanetID,
		&i.Title,
		&i.Content,
		&i.Comment,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const createPattern = `-- name: CreatePattern :one
INSERT INTO patterns (id, title, priority, color) VALUES (?, ?, ?, ?) RETURNING id, title, color, priority, created, updated
`

type CreatePatternParams struct {
	ID       string
	Title    string
	Priority sql.NullInt64
	Color    sql.NullString
}

func (q *Queries) CreatePattern(ctx context.Context, arg CreatePatternParams) (Pattern, error) {
	row := q.db.QueryRowContext(ctx, createPattern,
		arg.ID,
		arg.Title,
		arg.Priority,
		arg.Color,
	)
	var i Pattern
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Color,
		&i.Priority,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const createPlanet = `-- name: CreatePlanet :one
INSERT INTO planets (id, name, comment) VALUES (?, ?, ?) RETURNING id, name, comment, created, updated
`

type CreatePlanetParams struct {
	ID      string
	Name    string
	Comment string
}

func (q *Queries) CreatePlanet(ctx context.Context, arg CreatePlanetParams) (Planet, error) {
	row := q.db.QueryRowContext(ctx, createPlanet, arg.ID, arg.Name, arg.Comment)
	var i Planet
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Comment,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const createStone = `-- name: CreateStone :one
INSERT INTO stones (id, pattern_id, island_id, data) VALUES (?, ?, ?, ?) RETURNING id, pattern_id, island_id, data, created, updated
`

type CreateStoneParams struct {
	ID        string
	PatternID sql.NullString
	IslandID  sql.NullString
	Data      string
}

func (q *Queries) CreateStone(ctx context.Context, arg CreateStoneParams) (Stone, error) {
	row := q.db.QueryRowContext(ctx, createStone,
		arg.ID,
		arg.PatternID,
		arg.IslandID,
		arg.Data,
	)
	var i Stone
	err := row.Scan(
		&i.ID,
		&i.PatternID,
		&i.IslandID,
		&i.Data,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const createTag = `-- name: CreateTag :one
INSERT INTO tags (resource, key, value) VALUES (?, ?, ?) RETURNING id, resource, "key", value, created, updated
`

type CreateTagParams struct {
	Resource string
	Key      string
	Value    string
}

func (q *Queries) CreateTag(ctx context.Context, arg CreateTagParams) (Tag, error) {
	row := q.db.QueryRowContext(ctx, createTag, arg.Resource, arg.Key, arg.Value)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Resource,
		&i.Key,
		&i.Value,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const createTrait = `-- name: CreateTrait :one
INSERT INTO traits (id, pattern_id, path, type, default_value, required) VALUES (?, ?, ?, ?, ?, ?) RETURNING id, pattern_id, path, type, default_value, required, created, updated
`

type CreateTraitParams struct {
	ID           string
	PatternID    string
	Path         string
	Type         string
	DefaultValue string
	Required     bool
}

func (q *Queries) CreateTrait(ctx context.Context, arg CreateTraitParams) (Trait, error) {
	row := q.db.QueryRowContext(ctx, createTrait,
		arg.ID,
		arg.PatternID,
		arg.Path,
		arg.Type,
		arg.DefaultValue,
		arg.Required,
	)
	var i Trait
	err := row.Scan(
		&i.ID,
		&i.PatternID,
		&i.Path,
		&i.Type,
		&i.DefaultValue,
		&i.Required,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const deleteHistory = `-- name: DeleteHistory :exec
DELETE FROM histories WHERE id = ?
`

func (q *Queries) DeleteHistory(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteHistory, id)
	return err
}

const deleteIsland = `-- name: DeleteIsland :exec
DELETE FROM islands WHERE id = ?
`

func (q *Queries) DeleteIsland(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteIsland, id)
	return err
}

const deletePattern = `-- name: DeletePattern :exec
DELETE FROM patterns WHERE id = ?
`

func (q *Queries) DeletePattern(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deletePattern, id)
	return err
}

const deletePlanet = `-- name: DeletePlanet :exec
DELETE FROM planets WHERE name = ?
`

func (q *Queries) DeletePlanet(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deletePlanet, name)
	return err
}

const deleteStone = `-- name: DeleteStone :exec
DELETE FROM stones WHERE id = ?
`

func (q *Queries) DeleteStone(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteStone, id)
	return err
}

const deleteTag = `-- name: DeleteTag :exec
DELETE FROM tags WHERE id = ?
`

func (q *Queries) DeleteTag(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteTag, id)
	return err
}

const deleteTrait = `-- name: DeleteTrait :exec
DELETE FROM traits WHERE id = ?
`

func (q *Queries) DeleteTrait(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteTrait, id)
	return err
}

const getHistorys = `-- name: GetHistorys :one
SELECT id, resource, comment, created, updated FROM histories WHERE id = ?
`

func (q *Queries) GetHistorys(ctx context.Context, id string) (History, error) {
	row := q.db.QueryRowContext(ctx, getHistorys, id)
	var i History
	err := row.Scan(
		&i.ID,
		&i.Resource,
		&i.Comment,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getIsland = `-- name: GetIsland :one
SELECT id, planet_id, title, content, comment, created, updated FROM islands WHERE id = ?
`

func (q *Queries) GetIsland(ctx context.Context, id string) (Island, error) {
	row := q.db.QueryRowContext(ctx, getIsland, id)
	var i Island
	err := row.Scan(
		&i.ID,
		&i.PlanetID,
		&i.Title,
		&i.Content,
		&i.Comment,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getPattern = `-- name: GetPattern :one
SELECT id, title, color, priority, created, updated FROM patterns WHERE id = ?
`

func (q *Queries) GetPattern(ctx context.Context, id string) (Pattern, error) {
	row := q.db.QueryRowContext(ctx, getPattern, id)
	var i Pattern
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Color,
		&i.Priority,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getPlanet = `-- name: GetPlanet :one
SELECT id, name, comment, created, updated FROM planets WHERE id = ?
`

func (q *Queries) GetPlanet(ctx context.Context, id string) (Planet, error) {
	row := q.db.QueryRowContext(ctx, getPlanet, id)
	var i Planet
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Comment,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getPlanetByName = `-- name: GetPlanetByName :one
SELECT id, name, comment, created, updated FROM planets WHERE name = ?
`

func (q *Queries) GetPlanetByName(ctx context.Context, name string) (Planet, error) {
	row := q.db.QueryRowContext(ctx, getPlanetByName, name)
	var i Planet
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Comment,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getStone = `-- name: GetStone :one
SELECT id, pattern_id, island_id, data, created, updated FROM stones WHERE id = ?
`

func (q *Queries) GetStone(ctx context.Context, id string) (Stone, error) {
	row := q.db.QueryRowContext(ctx, getStone, id)
	var i Stone
	err := row.Scan(
		&i.ID,
		&i.PatternID,
		&i.IslandID,
		&i.Data,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getTag = `-- name: GetTag :one
SELECT id, resource, "key", value, created, updated FROM tags WHERE id = ?
`

func (q *Queries) GetTag(ctx context.Context, id string) (Tag, error) {
	row := q.db.QueryRowContext(ctx, getTag, id)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Resource,
		&i.Key,
		&i.Value,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getTrait = `-- name: GetTrait :one
SELECT id, pattern_id, path, type, default_value, required, created, updated FROM traits WHERE id = ?
`

func (q *Queries) GetTrait(ctx context.Context, id string) (Trait, error) {
	row := q.db.QueryRowContext(ctx, getTrait, id)
	var i Trait
	err := row.Scan(
		&i.ID,
		&i.PatternID,
		&i.Path,
		&i.Type,
		&i.DefaultValue,
		&i.Required,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const listComets = `-- name: ListComets :many
SELECT id, pattern_id, island_id, data, created, updated FROM stones WHERE island_id IS NULL
`

func (q *Queries) ListComets(ctx context.Context) ([]Stone, error) {
	rows, err := q.db.QueryContext(ctx, listComets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Stone
	for rows.Next() {
		var i Stone
		if err := rows.Scan(
			&i.ID,
			&i.PatternID,
			&i.IslandID,
			&i.Data,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listHistories = `-- name: ListHistories :many
SELECT id, resource, comment, created, updated FROM histories
`

func (q *Queries) ListHistories(ctx context.Context) ([]History, error) {
	rows, err := q.db.QueryContext(ctx, listHistories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []History
	for rows.Next() {
		var i History
		if err := rows.Scan(
			&i.ID,
			&i.Resource,
			&i.Comment,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listIslands = `-- name: ListIslands :many
SELECT id, planet_id, title, content, comment, created, updated FROM islands
`

func (q *Queries) ListIslands(ctx context.Context) ([]Island, error) {
	rows, err := q.db.QueryContext(ctx, listIslands)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Island
	for rows.Next() {
		var i Island
		if err := rows.Scan(
			&i.ID,
			&i.PlanetID,
			&i.Title,
			&i.Content,
			&i.Comment,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listIslandsByPlanetId = `-- name: ListIslandsByPlanetId :many
SELECT id, planet_id, title, content, comment, created, updated FROM islands where planet_id = ?
`

func (q *Queries) ListIslandsByPlanetId(ctx context.Context, planetID string) ([]Island, error) {
	rows, err := q.db.QueryContext(ctx, listIslandsByPlanetId, planetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Island
	for rows.Next() {
		var i Island
		if err := rows.Scan(
			&i.ID,
			&i.PlanetID,
			&i.Title,
			&i.Content,
			&i.Comment,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listIslandsByTitle = `-- name: ListIslandsByTitle :many
SELECT id, planet_id, title, content, comment, created, updated FROM islands where title = ?
`

func (q *Queries) ListIslandsByTitle(ctx context.Context, title string) ([]Island, error) {
	rows, err := q.db.QueryContext(ctx, listIslandsByTitle, title)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Island
	for rows.Next() {
		var i Island
		if err := rows.Scan(
			&i.ID,
			&i.PlanetID,
			&i.Title,
			&i.Content,
			&i.Comment,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPatterns = `-- name: ListPatterns :many
SELECT id, title, color, priority, created, updated FROM patterns
`

func (q *Queries) ListPatterns(ctx context.Context) ([]Pattern, error) {
	rows, err := q.db.QueryContext(ctx, listPatterns)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pattern
	for rows.Next() {
		var i Pattern
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Color,
			&i.Priority,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPlanets = `-- name: ListPlanets :many
SELECT id, name, comment, created, updated FROM planets
`

func (q *Queries) ListPlanets(ctx context.Context) ([]Planet, error) {
	rows, err := q.db.QueryContext(ctx, listPlanets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Planet
	for rows.Next() {
		var i Planet
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Comment,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStones = `-- name: ListStones :many
SELECT id, pattern_id, island_id, data, created, updated FROM stones
`

func (q *Queries) ListStones(ctx context.Context) ([]Stone, error) {
	rows, err := q.db.QueryContext(ctx, listStones)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Stone
	for rows.Next() {
		var i Stone
		if err := rows.Scan(
			&i.ID,
			&i.PatternID,
			&i.IslandID,
			&i.Data,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStonesByIslandId = `-- name: ListStonesByIslandId :many
SELECT id, pattern_id, island_id, data, created, updated FROM stones WHERE island_id = ?
`

func (q *Queries) ListStonesByIslandId(ctx context.Context, islandID sql.NullString) ([]Stone, error) {
	rows, err := q.db.QueryContext(ctx, listStonesByIslandId, islandID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Stone
	for rows.Next() {
		var i Stone
		if err := rows.Scan(
			&i.ID,
			&i.PatternID,
			&i.IslandID,
			&i.Data,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTags = `-- name: ListTags :many
SELECT id, resource, "key", value, created, updated FROM tags
`

func (q *Queries) ListTags(ctx context.Context) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, listTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.Resource,
			&i.Key,
			&i.Value,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTraits = `-- name: ListTraits :many
SELECT id, pattern_id, path, type, default_value, required, created, updated FROM traits
`

func (q *Queries) ListTraits(ctx context.Context) ([]Trait, error) {
	rows, err := q.db.QueryContext(ctx, listTraits)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Trait
	for rows.Next() {
		var i Trait
		if err := rows.Scan(
			&i.ID,
			&i.PatternID,
			&i.Path,
			&i.Type,
			&i.DefaultValue,
			&i.Required,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTraitsByPatternIds = `-- name: ListTraitsByPatternIds :many
SELECT id, pattern_id, path, type, default_value, required, created, updated FROM traits WHERE pattern_id IN (/*SLICE:pattern_ids*/?)
`

func (q *Queries) ListTraitsByPatternIds(ctx context.Context, patternIds []string) ([]Trait, error) {
	query := listTraitsByPatternIds
	var queryParams []interface{}
	if len(patternIds) > 0 {
		for _, v := range patternIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:pattern_ids*/?", strings.Repeat(",?", len(patternIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:pattern_ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Trait
	for rows.Next() {
		var i Trait
		if err := rows.Scan(
			&i.ID,
			&i.PatternID,
			&i.Path,
			&i.Type,
			&i.DefaultValue,
			&i.Required,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStone = `-- name: UpdateStone :exec
UPDATE stones SET island_id = ? WHERE id = ?
`

type UpdateStoneParams struct {
	IslandID sql.NullString
	ID       string
}

func (q *Queries) UpdateStone(ctx context.Context, arg UpdateStoneParams) error {
	_, err := q.db.ExecContext(ctx, updateStone, arg.IslandID, arg.ID)
	return err
}

const updateStonePatternId = `-- name: UpdateStonePatternId :exec
UPDATE stones SET pattern_id = ? WHERE id = ?
`

type UpdateStonePatternIdParams struct {
	PatternID sql.NullString
	ID        string
}

func (q *Queries) UpdateStonePatternId(ctx context.Context, arg UpdateStonePatternIdParams) error {
	_, err := q.db.ExecContext(ctx, updateStonePatternId, arg.PatternID, arg.ID)
	return err
}
